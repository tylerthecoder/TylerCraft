import { Entity } from "../entities/entity";
import { GameAction } from "../gameActions";
import { GameStateDiff } from "../gameStateDiff";





export abstract class AbstractScript {
	private gameActions: GameAction[] = [];

	/**
	 * Client actions are generated on the client side and passed here
	 * These should be processed as quick as possible to keep all of the clients as in sync as possible
	 * Validation of the actions could be done here but ideally the action contains only a small amount of information that doesn't need validation
	 */
	// abstract handleClientActions(actions: Action): void

	public addGameAction(gameAction: GameAction) {
		this.gameActions.push(gameAction);
	}

	public getGameActions(): GameAction[] {
		// Copy the actions to prevent pointer mishaps
		const actions = [...this.gameActions];
		this.gameActions = []
		return actions;
	}


	/** Will be passed client actions. These are generated by a controller somewhere. Modify state based on client events */
	abstract update(delta: number, stateDiff: GameStateDiff): void;

	/** This should not try to apply the actions to the game state
	 * only redirect the actions (i.e to a socket)
	 */
	abstract onActions(action: GameAction[]): void;


	/** Called for all existing entities and when a new entity is created */
	abstract onNewEntity(entity: Entity): void;

	abstract onRemoveEntity(entityId: string): void;
}